// Code generated by BobGen sqlite v0.21.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Account is an object representing the database table.
type Account struct {
	AccountNumber string  `db:"account_number,pk" `
	UserID        int64   `db:"user_id" `
	Balance       float32 `db:"balance" `
	CreatedAt     string  `db:"created_at" `

	R accountR `db:"-" `
}

// AccountSlice is an alias for a slice of pointers to Account.
// This should almost always be used instead of []*Account.
type AccountSlice []*Account

// AccountsTable contains methods to work with the accounts table
var AccountsTable = sqlite.NewTablex[*Account, AccountSlice, *AccountSetter]("", "accounts")

// AccountsQuery is a query on the accounts table
type AccountsQuery = *sqlite.TableQuery[*Account, AccountSlice, *AccountSetter]

// AccountsStmt is a prepared statment on accounts
type AccountsStmt = bob.QueryStmt[*Account, AccountSlice]

// accountR is where relationships are stored.
type accountR struct {
	User      *User         // fk_accounts_0
	Transfers TransferSlice // custom_videos_relationship
}

// AccountSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AccountSetter struct {
	AccountNumber omit.Val[string]  `db:"account_number,pk"`
	UserID        omit.Val[int64]   `db:"user_id"`
	Balance       omit.Val[float32] `db:"balance"`
	CreatedAt     omit.Val[string]  `db:"created_at"`
}

type accountColumnNames struct {
	AccountNumber string
	UserID        string
	Balance       string
	CreatedAt     string
}

type accountRelationshipJoins[Q dialect.Joinable] struct {
	User      bob.Mod[Q]
	Transfers bob.Mod[Q]
}

func buildaccountRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) accountRelationshipJoins[Q] {
	return accountRelationshipJoins[Q]{
		User:      accountsJoinUser[Q](ctx, typ),
		Transfers: accountsJoinTransfers[Q](ctx, typ),
	}
}

func accountsJoin[Q dialect.Joinable](ctx context.Context) joinSet[accountRelationshipJoins[Q]] {
	return joinSet[accountRelationshipJoins[Q]]{
		InnerJoin: buildaccountRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildaccountRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildaccountRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var AccountColumns = struct {
	AccountNumber sqlite.Expression
	UserID        sqlite.Expression
	Balance       sqlite.Expression
	CreatedAt     sqlite.Expression
}{
	AccountNumber: sqlite.Quote("accounts", "account_number"),
	UserID:        sqlite.Quote("accounts", "user_id"),
	Balance:       sqlite.Quote("accounts", "balance"),
	CreatedAt:     sqlite.Quote("accounts", "created_at"),
}

type accountWhere[Q sqlite.Filterable] struct {
	AccountNumber sqlite.WhereMod[Q, string]
	UserID        sqlite.WhereMod[Q, int64]
	Balance       sqlite.WhereMod[Q, float32]
	CreatedAt     sqlite.WhereMod[Q, string]
}

func AccountWhere[Q sqlite.Filterable]() accountWhere[Q] {
	return accountWhere[Q]{
		AccountNumber: sqlite.Where[Q, string](AccountColumns.AccountNumber),
		UserID:        sqlite.Where[Q, int64](AccountColumns.UserID),
		Balance:       sqlite.Where[Q, float32](AccountColumns.Balance),
		CreatedAt:     sqlite.Where[Q, string](AccountColumns.CreatedAt),
	}
}

// Accounts begins a query on accounts
func Accounts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AccountsQuery {
	return AccountsTable.Query(ctx, exec, mods...)
}

// FindAccount retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAccount(ctx context.Context, exec bob.Executor, AccountNumberPK string, cols ...string) (*Account, error) {
	if len(cols) == 0 {
		return AccountsTable.Query(
			ctx, exec,
			SelectWhere.Accounts.AccountNumber.EQ(AccountNumberPK),
		).One()
	}

	return AccountsTable.Query(
		ctx, exec,
		SelectWhere.Accounts.AccountNumber.EQ(AccountNumberPK),
		sm.Columns(AccountsTable.Columns().Only(cols...)),
	).One()
}

// AccountExists checks the presence of a single record by primary key
func AccountExists(ctx context.Context, exec bob.Executor, AccountNumberPK string) (bool, error) {
	return AccountsTable.Query(
		ctx, exec,
		SelectWhere.Accounts.AccountNumber.EQ(AccountNumberPK),
	).Exists()
}

// Update uses an executor to update the Account
func (o *Account) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := AccountsTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single Account record with an executor
func (o *Account) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return AccountsTable.Delete(ctx, exec, o)
}

// Reload refreshes the Account using the executor
func (o *Account) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := AccountsTable.Query(
		ctx, exec,
		SelectWhere.Accounts.AccountNumber.EQ(o.AccountNumber),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o AccountSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return AccountsTable.DeleteMany(ctx, exec, o...)
}

func (o AccountSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AccountSetter) (int64, error) {
	rowsAff, err := AccountsTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o AccountSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	AccountNumberPK := make([]string, len(o))

	for i, o := range o {
		AccountNumberPK[i] = o.AccountNumber
	}

	mods = append(mods,
		SelectWhere.Accounts.AccountNumber.In(AccountNumberPK...),
	)

	o2, err := Accounts(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.AccountNumber != old.AccountNumber {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func accountsJoinUser[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, UsersTable.Name(ctx)).On(
			UserColumns.ID.EQ(AccountColumns.UserID),
		),
	}
}
func accountsJoinTransfers[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, TransfersTable.Name(ctx)).On(
			TransferColumns.FromAccount.EQ(AccountColumns.AccountNumber), TransferColumns.ToAccount.EQ(AccountColumns.AccountNumber),
		),
	}
}

// User starts a query for related objects on users
func (o *Account) User(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.UserID))),
	)...)
}

func (os AccountSlice) User(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, 0, len(os))
	for _, o := range os {
		PKArgs = append(PKArgs, sqlite.ArgGroup(o.UserID))
	}

	return Users(ctx, exec, append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

// Transfers starts a query for related objects on transfers
func (o *Account) Transfers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TransfersQuery {
	return Transfers(ctx, exec, append(mods,
		sm.Where(TransferColumns.FromAccount.EQ(sqlite.Arg(o.AccountNumber))), sm.Where(TransferColumns.ToAccount.EQ(sqlite.Arg(o.AccountNumber))),
	)...)
}

func (os AccountSlice) Transfers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TransfersQuery {
	PKArgs := make([]bob.Expression, 0, len(os))
	for _, o := range os {
		PKArgs = append(PKArgs, sqlite.ArgGroup(o.AccountNumber, o.AccountNumber))
	}

	return Transfers(ctx, exec, append(mods,
		sm.Where(sqlite.Group(TransferColumns.FromAccount, TransferColumns.ToAccount).In(PKArgs...)),
	)...)
}

func (o *Account) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("account cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Accounts = AccountSlice{o}
		}
		return nil
	case "Transfers":
		rels, ok := retrieved.(TransferSlice)
		if !ok {
			return fmt.Errorf("account cannot load %T as %q", retrieved, name)
		}

		o.R.Transfers = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Account = o
			}
		}
		return nil
	default:
		return fmt.Errorf("account has no relationship %q", name)
	}
}

func PreloadAccountUser(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: "accounts",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return UsersTable.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Accounts.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, UsersTable.Columns().Names(), opts...)
}

func ThenLoadAccountUser(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAccountUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AccountUser", retrieved)
		}

		err := loader.LoadAccountUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAccountUser loads the account's User into the .R struct
func (o *Account) LoadAccountUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Accounts = AccountSlice{o}

	o.R.User = related
	return nil
}

// LoadAccountUser loads the account's User into the .R struct
func (os AccountSlice) LoadAccountUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Accounts = append(rel.R.Accounts, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func ThenLoadAccountTransfers(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAccountTransfers(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AccountTransfers", retrieved)
		}

		err := loader.LoadAccountTransfers(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAccountTransfers loads the account's Transfers into the .R struct
func (o *Account) LoadAccountTransfers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Transfers = nil

	related, err := o.Transfers(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Account = o
	}

	o.R.Transfers = related
	return nil
}

// LoadAccountTransfers loads the account's Transfers into the .R struct
func (os AccountSlice) LoadAccountTransfers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	transfers, err := os.Transfers(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Transfers = nil
	}

	for _, o := range os {
		for _, rel := range transfers {
			if o.AccountNumber != rel.FromAccount {
				continue
			}
			if o.AccountNumber != rel.ToAccount {
				continue
			}

			rel.R.Account = o

			o.R.Transfers = append(o.R.Transfers, rel)
		}
	}

	return nil
}

func (o *Account) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	rel, err := UsersTable.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.User = rel

	o.UserID = rel.ID

	o.R.User.R.Accounts = AccountSlice{o}

	return nil
}

func (o *Account) AttachUser(ctx context.Context, exec bob.Executor, rel *User) error {
	var err error

	o.UserID = rel.ID

	_, err = rel.Update(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.User = rel

	rel.R.Accounts = append(rel.R.Accounts, o)

	return nil
}

func (o *Account) InsertTransfers(ctx context.Context, exec bob.Executor, related ...*TransferSetter) error {
	var err error

	rels := related

	for _, rel := range rels {
		rel.FromAccount = omit.From(o.AccountNumber)
		rel.ToAccount = omit.From(o.AccountNumber)
	}

	newRels, err := TransfersTable.InsertMany(ctx, exec, related...)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.Transfers = append(o.R.Transfers, newRels...)

	for _, rel := range newRels {
		rel.R.Account = o
	}

	return nil
}

func (o *Account) AttachTransfers(ctx context.Context, exec bob.Executor, related ...*Transfer) error {

	for _, rel := range related {
		rel.FromAccount = o.AccountNumber
		rel.ToAccount = o.AccountNumber
	}

	if _, err := TransfersTable.UpdateMany(
		ctx, exec, &TransferSetter{
			FromAccount: omit.From(o.AccountNumber),
			ToAccount:   omit.From(o.AccountNumber),
		}, related...,
	); err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	o.R.Transfers = append(o.R.Transfers, related...)

	for _, rel := range related {
		rel.R.Account = o
	}

	return nil
}
