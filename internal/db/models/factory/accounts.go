// Code generated by BobGen sqlite v0.20.6. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
	models "go-api/internal/db/models"
)

type AccountMod interface {
	Apply(*AccountTemplate)
}

type AccountModFunc func(*AccountTemplate)

func (f AccountModFunc) Apply(n *AccountTemplate) {
	f(n)
}

type AccountModSlice []AccountMod

func (mods AccountModSlice) Apply(n *AccountTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// AccountTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type AccountTemplate struct {
	AccountNumber func() string
	UserID        func() int64
	Balance       func() float32
	CreatedAt     func() null.Val[string]

	r accountR
	f *factory
}

type accountR struct {
	User      *accountRUserR
	Transfers []*accountRTransfersR
}

type accountRUserR struct {
	o *UserTemplate
}
type accountRTransfersR struct {
	number int
	o      *TransferTemplate
}

// Apply mods to the AccountTemplate
func (o *AccountTemplate) Apply(mods ...AccountMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Account
// this does nothing with the relationship templates
func (o AccountTemplate) toModel() *models.Account {
	m := &models.Account{}

	if o.AccountNumber != nil {
		m.AccountNumber = o.AccountNumber()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Balance != nil {
		m.Balance = o.Balance()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	return m
}

// toModels returns an models.AccountSlice
// this does nothing with the relationship templates
func (o AccountTemplate) toModels(number int) models.AccountSlice {
	m := make(models.AccountSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Account
// according to the relationships in the template. Nothing is inserted into the db
func (t AccountTemplate) setModelRels(o *models.Account) {
	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.Accounts = append(rel.R.Accounts, o)
		o.UserID = rel.ID
		o.R.User = rel
	}

	if t.r.Transfers != nil {
		rel := models.TransferSlice{}
		for _, r := range t.r.Transfers {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.FromAccount = o.AccountNumber
				rel.ToAccount = o.AccountNumber
				rel.R.Account = o
			}
			rel = append(rel, related...)
		}
		o.R.Transfers = rel
	}

}

// BuildSetter returns an *models.AccountSetter
// this does nothing with the relationship templates
func (o AccountTemplate) BuildSetter() *models.AccountSetter {
	m := &models.AccountSetter{}

	if o.AccountNumber != nil {
		m.AccountNumber = omit.From(o.AccountNumber())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.Balance != nil {
		m.Balance = omit.From(o.Balance())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omitnull.FromNull(o.CreatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.AccountSetter
// this does nothing with the relationship templates
func (o AccountTemplate) BuildManySetter(number int) []*models.AccountSetter {
	m := make([]*models.AccountSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Account
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AccountTemplate.Create
func (o AccountTemplate) Build() *models.Account {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.AccountSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AccountTemplate.CreateMany
func (o AccountTemplate) BuildMany(number int) models.AccountSlice {
	m := make(models.AccountSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAccount(m *models.AccountSetter) {
	if m.AccountNumber.IsUnset() {
		m.AccountNumber = omit.From(random[string](nil))
	}
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random[int64](nil))
	}
	if m.Balance.IsUnset() {
		m.Balance = omit.From(random[float32](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Account
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *AccountTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Account) (context.Context, error) {
	var err error

	if o.r.Transfers != nil {
		for _, r := range o.r.Transfers {
			var rel1 models.TransferSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachTransfers(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a account and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *AccountTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Account, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a account and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *AccountTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Account, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAccount(opt)

	var rel0 *models.User
	if o.r.User == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			AccountMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel0.ID)

	m, err := models.AccountsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = accountCtx.WithValue(ctx, m)

	m.R.User = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple accounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o AccountTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.AccountSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple accounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o AccountTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.AccountSlice, error) {
	var err error
	m := make(models.AccountSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Account has methods that act as mods for the AccountTemplate
var AccountMods accountMods

type accountMods struct{}

func (m accountMods) RandomizeAllColumns(f *faker.Faker) AccountMod {
	return AccountModSlice{
		AccountMods.RandomAccountNumber(f),
		AccountMods.RandomUserID(f),
		AccountMods.RandomBalance(f),
		AccountMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m accountMods) AccountNumber(val string) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.AccountNumber = func() string { return val }
	})
}

// Set the Column from the function
func (m accountMods) AccountNumberFunc(f func() string) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.AccountNumber = f
	})
}

// Clear any values for the column
func (m accountMods) UnsetAccountNumber() AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.AccountNumber = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m accountMods) RandomAccountNumber(f *faker.Faker) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.AccountNumber = func() string {
			return random[string](f)
		}
	})
}

func (m accountMods) ensureAccountNumber(f *faker.Faker) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		if o.AccountNumber != nil {
			return
		}

		o.AccountNumber = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m accountMods) UserID(val int64) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m accountMods) UserIDFunc(f func() int64) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m accountMods) UnsetUserID() AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m accountMods) RandomUserID(f *faker.Faker) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.UserID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m accountMods) ensureUserID(f *faker.Faker) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		if o.UserID != nil {
			return
		}

		o.UserID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m accountMods) Balance(val float32) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.Balance = func() float32 { return val }
	})
}

// Set the Column from the function
func (m accountMods) BalanceFunc(f func() float32) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.Balance = f
	})
}

// Clear any values for the column
func (m accountMods) UnsetBalance() AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.Balance = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m accountMods) RandomBalance(f *faker.Faker) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.Balance = func() float32 {
			return random[float32](f)
		}
	})
}

func (m accountMods) ensureBalance(f *faker.Faker) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		if o.Balance != nil {
			return
		}

		o.Balance = func() float32 {
			return random[float32](f)
		}
	})
}

// Set the model columns to this value
func (m accountMods) CreatedAt(val null.Val[string]) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.CreatedAt = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m accountMods) CreatedAtFunc(f func() null.Val[string]) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m accountMods) UnsetCreatedAt() AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m accountMods) RandomCreatedAt(f *faker.Faker) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.CreatedAt = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m accountMods) ensureCreatedAt(f *faker.Faker) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m accountMods) WithUser(rel *UserTemplate) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.r.User = &accountRUserR{
			o: rel,
		}
	})
}

func (m accountMods) WithNewUser(mods ...UserMod) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {

		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m accountMods) WithoutUser() AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.r.User = nil
	})
}

func (m accountMods) WithTransfers(number int, related *TransferTemplate) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.r.Transfers = []*accountRTransfersR{{
			number: number,
			o:      related,
		}}
	})
}

func (m accountMods) WithNewTransfers(number int, mods ...TransferMod) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {

		related := o.f.NewTransfer(mods...)
		m.WithTransfers(number, related).Apply(o)
	})
}

func (m accountMods) AddTransfers(number int, related *TransferTemplate) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.r.Transfers = append(o.r.Transfers, &accountRTransfersR{
			number: number,
			o:      related,
		})
	})
}

func (m accountMods) AddNewTransfers(number int, mods ...TransferMod) AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {

		related := o.f.NewTransfer(mods...)
		m.AddTransfers(number, related).Apply(o)
	})
}

func (m accountMods) WithoutTransfers() AccountMod {
	return AccountModFunc(func(o *AccountTemplate) {
		o.r.Transfers = nil
	})
}
