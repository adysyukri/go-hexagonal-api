// Code generated by BobGen sqlite v0.21.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker"
	models "go-api/internal/db/models"
)

type SchemaMigrationMod interface {
	Apply(*SchemaMigrationTemplate)
}

type SchemaMigrationModFunc func(*SchemaMigrationTemplate)

func (f SchemaMigrationModFunc) Apply(n *SchemaMigrationTemplate) {
	f(n)
}

type SchemaMigrationModSlice []SchemaMigrationMod

func (mods SchemaMigrationModSlice) Apply(n *SchemaMigrationTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// SchemaMigrationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type SchemaMigrationTemplate struct {
	Version func() null.Val[string]
	Dirty   func() null.Val[string]

	f *factory
}

// Apply mods to the SchemaMigrationTemplate
func (o *SchemaMigrationTemplate) Apply(mods ...SchemaMigrationMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.SchemaMigration
// this does nothing with the relationship templates
func (o SchemaMigrationTemplate) toModel() *models.SchemaMigration {
	m := &models.SchemaMigration{}

	if o.Version != nil {
		m.Version = o.Version()
	}
	if o.Dirty != nil {
		m.Dirty = o.Dirty()
	}

	return m
}

// toModels returns an models.SchemaMigrationSlice
// this does nothing with the relationship templates
func (o SchemaMigrationTemplate) toModels(number int) models.SchemaMigrationSlice {
	m := make(models.SchemaMigrationSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.SchemaMigration
// according to the relationships in the template. Nothing is inserted into the db
func (t SchemaMigrationTemplate) setModelRels(o *models.SchemaMigration) {}

// Build returns an *models.SchemaMigration
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SchemaMigrationTemplate.Create
func (o SchemaMigrationTemplate) Build() *models.SchemaMigration {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.SchemaMigrationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SchemaMigrationTemplate.CreateMany
func (o SchemaMigrationTemplate) BuildMany(number int) models.SchemaMigrationSlice {
	m := make(models.SchemaMigrationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// SchemaMigration has methods that act as mods for the SchemaMigrationTemplate
var SchemaMigrationMods schemaMigrationMods

type schemaMigrationMods struct{}

func (m schemaMigrationMods) RandomizeAllColumns(f *faker.Faker) SchemaMigrationMod {
	return SchemaMigrationModSlice{
		SchemaMigrationMods.RandomVersion(f),
		SchemaMigrationMods.RandomDirty(f),
	}
}

// Set the model columns to this value
func (m schemaMigrationMods) Version(val null.Val[string]) SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		o.Version = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m schemaMigrationMods) VersionFunc(f func() null.Val[string]) SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m schemaMigrationMods) UnsetVersion() SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m schemaMigrationMods) RandomVersion(f *faker.Faker) SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		o.Version = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m schemaMigrationMods) ensureVersion(f *faker.Faker) SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		if o.Version != nil {
			return
		}

		o.Version = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m schemaMigrationMods) Dirty(val null.Val[string]) SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		o.Dirty = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m schemaMigrationMods) DirtyFunc(f func() null.Val[string]) SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		o.Dirty = f
	})
}

// Clear any values for the column
func (m schemaMigrationMods) UnsetDirty() SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		o.Dirty = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m schemaMigrationMods) RandomDirty(f *faker.Faker) SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		o.Dirty = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m schemaMigrationMods) ensureDirty(f *faker.Faker) SchemaMigrationMod {
	return SchemaMigrationModFunc(func(o *SchemaMigrationTemplate) {
		if o.Dirty != nil {
			return
		}

		o.Dirty = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}
