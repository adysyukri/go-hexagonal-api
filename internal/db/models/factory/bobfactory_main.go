// Code generated by BobGen sqlite v0.20.6. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"strings"

	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker"
	models "go-api/internal/db/models"
)

type factory struct {
	baseAccountMods         AccountModSlice
	baseSchemaMigrationMods SchemaMigrationModSlice
	baseTransferMods        TransferModSlice
	baseUserMods            UserModSlice
}

func New() *factory {
	return &factory{}
}

func (f *factory) NewAccount(mods ...AccountMod) *AccountTemplate {
	o := &AccountTemplate{f: f}

	if f != nil {
		f.baseAccountMods.Apply(o)
	}

	AccountModSlice(mods).Apply(o)

	return o
}

func (f *factory) NewSchemaMigration(mods ...SchemaMigrationMod) *SchemaMigrationTemplate {
	o := &SchemaMigrationTemplate{f: f}

	if f != nil {
		f.baseSchemaMigrationMods.Apply(o)
	}

	SchemaMigrationModSlice(mods).Apply(o)

	return o
}

func (f *factory) NewTransfer(mods ...TransferMod) *TransferTemplate {
	o := &TransferTemplate{f: f}

	if f != nil {
		f.baseTransferMods.Apply(o)
	}

	TransferModSlice(mods).Apply(o)

	return o
}

func (f *factory) NewUser(mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(o)
	}

	UserModSlice(mods).Apply(o)

	return o
}

func (f *factory) ClearBaseAccountMods() {
	f.baseAccountMods = nil
}

func (f *factory) AddBaseAccountMod(mods ...AccountMod) {
	f.baseAccountMods = append(f.baseAccountMods, mods...)
}

func (f *factory) ClearBaseSchemaMigrationMods() {
	f.baseSchemaMigrationMods = nil
}

func (f *factory) AddBaseSchemaMigrationMod(mods ...SchemaMigrationMod) {
	f.baseSchemaMigrationMods = append(f.baseSchemaMigrationMods, mods...)
}

func (f *factory) ClearBaseTransferMods() {
	f.baseTransferMods = nil
}

func (f *factory) AddBaseTransferMod(mods ...TransferMod) {
	f.baseTransferMods = append(f.baseTransferMods, mods...)
}

func (f *factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}

type contextKey string

var (
	accountCtx         = newContextual[*models.Account]("account")
	schemaMigrationCtx = newContextual[*models.SchemaMigration]("schemaMigration")
	transferCtx        = newContextual[*models.Transfer]("transfer")
	userCtx            = newContextual[*models.User]("user")
)

type contextual[V any] struct {
	key contextKey
}

// This could be weird because of type inference not handling `K` due to `V` having to be manual.
func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}

var defaultFaker = faker.New()

// random returns a random value for the given type, using the faker
// * If the given faker is nil, the default faker is used
// * The zero value is returned if the type cannot be handled
func random[T any](f *faker.Faker) T {
	if f == nil {
		f = &defaultFaker
	}

	var val T
	switch any(val).(type) {
	default:
		return val
	case string:
		return any(string(strings.Join(f.Lorem().Words(5), " "))).(T)

	case bool:
		return any(bool(f.BoolWithChance(50))).(T)

	case int:
		return any(int(f.Int())).(T)

	case int64:
		return val

	case float32:
		return val

	}
}

// randomNull is like [Random], but for null types
func randomNull[T any](f *faker.Faker) null.Val[T] {
	return null.From(random[T](f))
}
