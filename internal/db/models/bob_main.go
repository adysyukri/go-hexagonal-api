// Code generated by BobGen sqlite v0.20.6. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"

	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
)

var TableNames = struct {
	Accounts         string
	SchemaMigrations string
	Transfers        string
	Users            string
}{
	Accounts:         "accounts",
	SchemaMigrations: "schema_migrations",
	Transfers:        "transfers",
	Users:            "users",
}

var ColumnNames = struct {
	Accounts         accountColumnNames
	SchemaMigrations schemaMigrationColumnNames
	Transfers        transferColumnNames
	Users            userColumnNames
}{
	Accounts: accountColumnNames{
		AccountNumber: "account_number",
		UserID:        "user_id",
		Balance:       "balance",
		CreatedAt:     "created_at",
	},
	SchemaMigrations: schemaMigrationColumnNames{
		Version: "version",
		Dirty:   "dirty",
	},
	Transfers: transferColumnNames{
		ID:          "id",
		FromAccount: "from_account",
		ToAccount:   "to_account",
		Amount:      "amount",
		CreatedAt:   "created_at",
	},
	Users: userColumnNames{
		ID:        "id",
		Name:      "name",
		CreatedAt: "created_at",
	},
}

var (
	SelectWhere = Where[*dialect.SelectQuery]()
	InsertWhere = Where[*dialect.InsertQuery]()
	UpdateWhere = Where[*dialect.UpdateQuery]()
	DeleteWhere = Where[*dialect.DeleteQuery]()
)

func Where[Q sqlite.Filterable]() struct {
	Accounts         accountWhere[Q]
	SchemaMigrations schemaMigrationWhere[Q]
	Transfers        transferWhere[Q]
	Users            userWhere[Q]
} {
	return struct {
		Accounts         accountWhere[Q]
		SchemaMigrations schemaMigrationWhere[Q]
		Transfers        transferWhere[Q]
		Users            userWhere[Q]
	}{
		Accounts:         AccountWhere[Q](),
		SchemaMigrations: SchemaMigrationWhere[Q](),
		Transfers:        TransferWhere[Q](),
		Users:            UserWhere[Q](),
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]
	UpdateJoins = getJoins[*dialect.UpdateQuery]
)

type joinSet[Q any] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

type joins[Q dialect.Joinable] struct {
	Accounts  joinSet[accountRelationshipJoins[Q]]
	Transfers joinSet[transferRelationshipJoins[Q]]
	Users     joinSet[userRelationshipJoins[Q]]
}

func getJoins[Q dialect.Joinable](ctx context.Context) joins[Q] {
	return joins[Q]{
		Accounts:  accountsJoin[Q](ctx),
		Transfers: transfersJoin[Q](ctx),
		Users:     usersJoin[Q](ctx),
	}
}
