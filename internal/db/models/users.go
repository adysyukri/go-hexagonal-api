// Code generated by BobGen sqlite v0.21.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/mods"
)

// User is an object representing the database table.
type User struct {
	ID        int64  `db:"id,pk" `
	Name      string `db:"name" `
	CreatedAt string `db:"created_at" `

	R userR `db:"-" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// UsersTable contains methods to work with the users table
var UsersTable = sqlite.NewTablex[*User, UserSlice, *UserSetter]("", "users")

// UsersQuery is a query on the users table
type UsersQuery = *sqlite.TableQuery[*User, UserSlice, *UserSetter]

// UsersStmt is a prepared statment on users
type UsersStmt = bob.QueryStmt[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	Accounts AccountSlice // fk_accounts_0
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID        omit.Val[int64]  `db:"id,pk"`
	Name      omit.Val[string] `db:"name"`
	CreatedAt omit.Val[string] `db:"created_at"`
}

type userColumnNames struct {
	ID        string
	Name      string
	CreatedAt string
}

type userRelationshipJoins[Q dialect.Joinable] struct {
	Accounts bob.Mod[Q]
}

func builduserRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) userRelationshipJoins[Q] {
	return userRelationshipJoins[Q]{
		Accounts: usersJoinAccounts[Q](ctx, typ),
	}
}

func usersJoin[Q dialect.Joinable](ctx context.Context) joinSet[userRelationshipJoins[Q]] {
	return joinSet[userRelationshipJoins[Q]]{
		InnerJoin: builduserRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  builduserRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: builduserRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var UserColumns = struct {
	ID        sqlite.Expression
	Name      sqlite.Expression
	CreatedAt sqlite.Expression
}{
	ID:        sqlite.Quote("users", "id"),
	Name:      sqlite.Quote("users", "name"),
	CreatedAt: sqlite.Quote("users", "created_at"),
}

type userWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int64]
	Name      sqlite.WhereMod[Q, string]
	CreatedAt sqlite.WhereMod[Q, string]
}

func UserWhere[Q sqlite.Filterable]() userWhere[Q] {
	return userWhere[Q]{
		ID:        sqlite.Where[Q, int64](UserColumns.ID),
		Name:      sqlite.Where[Q, string](UserColumns.Name),
		CreatedAt: sqlite.Where[Q, string](UserColumns.CreatedAt),
	}
}

// Users begins a query on users
func Users(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return UsersTable.Query(ctx, exec, mods...)
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return UsersTable.Query(
			ctx, exec,
			SelectWhere.Users.ID.EQ(IDPK),
		).One()
	}

	return UsersTable.Query(
		ctx, exec,
		SelectWhere.Users.ID.EQ(IDPK),
		sm.Columns(UsersTable.Columns().Only(cols...)),
	).One()
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return UsersTable.Query(
		ctx, exec,
		SelectWhere.Users.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := UsersTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return UsersTable.Delete(ctx, exec, o)
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UsersTable.Query(
		ctx, exec,
		SelectWhere.Users.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return UsersTable.DeleteMany(ctx, exec, o...)
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) (int64, error) {
	rowsAff, err := UsersTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int64, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Users.ID.In(IDPK...),
	)

	o2, err := Users(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func usersJoinAccounts[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, AccountsTable.Name(ctx)).On(
			AccountColumns.UserID.EQ(UserColumns.ID),
		),
	}
}

// Accounts starts a query for related objects on accounts
func (o *User) Accounts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AccountsQuery {
	return Accounts(ctx, exec, append(mods,
		sm.Where(AccountColumns.UserID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os UserSlice) Accounts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AccountsQuery {
	PKArgs := make([]bob.Expression, 0, len(os))
	for _, o := range os {
		PKArgs = append(PKArgs, sqlite.ArgGroup(o.ID))
	}

	return Accounts(ctx, exec, append(mods,
		sm.Where(sqlite.Group(AccountColumns.UserID).In(PKArgs...)),
	)...)
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Accounts":
		rels, ok := retrieved.(AccountSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Accounts = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

func ThenLoadUserAccounts(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserAccounts(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserAccounts", retrieved)
		}

		err := loader.LoadUserAccounts(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserAccounts loads the user's Accounts into the .R struct
func (o *User) LoadUserAccounts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Accounts = nil

	related, err := o.Accounts(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Accounts = related
	return nil
}

// LoadUserAccounts loads the user's Accounts into the .R struct
func (os UserSlice) LoadUserAccounts(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	accounts, err := os.Accounts(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Accounts = nil
	}

	for _, o := range os {
		for _, rel := range accounts {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.Accounts = append(o.R.Accounts, rel)
		}
	}

	return nil
}

func (o *User) InsertAccounts(ctx context.Context, exec bob.Executor, related ...*AccountSetter) error {
	var err error

	rels := related

	for _, rel := range rels {
		rel.UserID = omit.From(o.ID)
	}

	newRels, err := AccountsTable.InsertMany(ctx, exec, related...)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.Accounts = append(o.R.Accounts, newRels...)

	for _, rel := range newRels {
		rel.R.User = o
	}

	return nil
}

func (o *User) AttachAccounts(ctx context.Context, exec bob.Executor, related ...*Account) error {

	for _, rel := range related {
		rel.UserID = o.ID
	}

	if _, err := AccountsTable.UpdateMany(
		ctx, exec, &AccountSetter{
			UserID: omit.From(o.ID),
		}, related...,
	); err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	o.R.Accounts = append(o.R.Accounts, related...)

	for _, rel := range related {
		rel.R.User = o
	}

	return nil
}
